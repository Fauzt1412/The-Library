import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport '../styles/floating-chat.css';\n\n// Simple, safe floating chat component that won't crash the browser\nconst SafeFloatingChat = () => {\n  const { user } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const [newMessage, setNewMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const chatInputRef = useRef(null);\n\n  // Simple environment detection\n  const isProduction = typeof window !== 'undefined' && \n    window.location.hostname !== 'localhost' && \n    window.location.hostname !== '127.0.0.1';\n\n  // Get server URL\n  const getServerUrl = () => {\n    if (isProduction) {\n      return process.env.REACT_APP_API_URL || 'https://the-library-a11t.onrender.com';\n    }\n    return process.env.REACT_APP_API_URL || 'http://localhost:1412';\n  };\n\n  // Test server connection\n  useEffect(() => {\n    const testConnection = async () => {\n      try {\n        const serverUrl = getServerUrl();\n        const response = await fetch(`${serverUrl}/health`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        \n        if (response.ok) {\n          setIsConnected(true);\n          setConnectionError(null);\n          console.log('✅ Server connection successful');\n        } else {\n          setIsConnected(false);\n          setConnectionError('Server not responding');\n        }\n      } catch (error) {\n        setIsConnected(false);\n        setConnectionError(error.message);\n        console.log('❌ Server connection failed:', error.message);\n      }\n    };\n\n    testConnection();\n    // Test connection every 30 seconds\n    const interval = setInterval(testConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Focus input when chat opens\n  useEffect(() => {\n    if (isOpen && chatInputRef.current) {\n      chatInputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  const handleToggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    \n    if (!newMessage.trim() || !user) return;\n    \n    // Add message locally (simple fallback)\n    const message = {\n      _id: Date.now().toString(),\n      username: user.username || user.email || 'User',\n      message: newMessage.trim(),\n      timestamp: new Date(),\n      messageType: user.role === 'admin' ? 'admin' : 'user'\n    };\n    \n    setMessages(prev => [...prev, message]);\n    setNewMessage('');\n    \n    // Try to send to server if connected\n    if (isConnected) {\n      try {\n        const serverUrl = getServerUrl();\n        await fetch(`${serverUrl}/API/chat/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-user-id': user._id || user.id\n          },\n          body: JSON.stringify({\n            message: newMessage.trim(),\n            messageType: user.role === 'admin' ? 'admin' : 'user'\n          })\n        });\n      } catch (error) {\n        console.log('Failed to send to server:', error.message);\n      }\n    }\n  };\n\n  const formatTime = (timestamp) => {\n    try {\n      const now = new Date();\n      const messageTime = new Date(timestamp);\n      const diffInMinutes = Math.floor((now - messageTime) / (1000 * 60));\n      \n      if (diffInMinutes < 1) return 'Just now';\n      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n      if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n      return messageTime.toLocaleDateString();\n    } catch (error) {\n      return 'Unknown time';\n    }\n  };\n\n  const renderMessage = (msg, index) => {\n    const key = msg._id || `msg-${index}`;\n    \n    return (\n      <div key={key} className={`message ${msg.messageType === 'admin' ? 'admin-message' : ''}`}>\n        <div className=\"message-header\">\n          <span className={`message-user ${msg.messageType === 'admin' ? 'admin-user' : ''}`}>\n            {msg.messageType === 'admin' && <i className=\"fas fa-crown me-1\"></i>}\n            {msg.username}\n          </span>\n          <span className=\"message-time\">{formatTime(msg.timestamp)}</span>\n        </div>\n        <div className=\"message-content\">\n          {msg.message}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {/* Chat Toggle Button */}\n      <div \n        className={`floating-chat-toggle ${isOpen ? 'open' : ''}`} \n        onClick={handleToggleChat}\n        style={{\n          position: 'fixed',\n          bottom: '20px',\n          right: '20px',\n          width: '60px',\n          height: '60px',\n          background: isConnected \n            ? 'linear-gradient(135deg, #007bff, #0056b3)' \n            : 'linear-gradient(135deg, #6c757d, #5a6268)',\n          borderRadius: '50%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          boxShadow: '0 4px 20px rgba(0, 123, 255, 0.3)',\n          zIndex: 1000,\n          transition: 'all 0.3s ease'\n        }}\n        title={isConnected ? 'Library Forum Chat' : `Chat unavailable: ${connectionError}`}\n      >\n        <div className=\"chat-icon\">\n          {isOpen ? (\n            <i className=\"fas fa-times\" style={{ color: 'white', fontSize: '24px' }}></i>\n          ) : (\n            <i className=\"fas fa-comments\" style={{ color: 'white', fontSize: '24px' }}></i>\n          )}\n        </div>\n        {!isConnected && (\n          <div \n            style={{\n              position: 'absolute',\n              top: '-8px',\n              right: '-8px',\n              background: '#ffc107',\n              color: '#212529',\n              borderRadius: '50%',\n              width: '20px',\n              height: '20px',\n              fontSize: '12px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              fontWeight: 'bold'\n            }}\n          >\n            !\n          </div>\n        )}\n      </div>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div \n          className=\"floating-chat-window open\"\n          style={{\n            position: 'fixed',\n            bottom: '90px',\n            right: '20px',\n            width: '350px',\n            height: '500px',\n            zIndex: 999,\n            background: 'white',\n            borderRadius: '12px',\n            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.15)',\n            border: '1px solid #e0e0e0',\n            display: 'flex',\n            flexDirection: 'column'\n          }}\n        >\n          {/* Chat Header */}\n          <div \n            className=\"chat-header\"\n            style={{\n              padding: '16px',\n              borderBottom: '1px solid #e0e0e0',\n              borderRadius: '12px 12px 0 0',\n              background: 'linear-gradient(135deg, #007bff, #0056b3)',\n              color: 'white'\n            }}\n          >\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <div>\n                <i className=\"fas fa-comments me-2\"></i>\n                <span>Library Forum</span>\n              </div>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n                <div style={{ fontSize: '12px' }}>\n                  <span className={`online-dot ${isConnected ? 'connected' : 'disconnected'}`} \n                        style={{ \n                          display: 'inline-block',\n                          width: '8px',\n                          height: '8px',\n                          borderRadius: '50%',\n                          backgroundColor: isConnected ? '#28a745' : '#dc3545',\n                          marginRight: '5px'\n                        }}></span>\n                  {isConnected ? 'Connected' : 'Disconnected'}\n                </div>\n                <button \n                  onClick={handleToggleChat}\n                  style={{ \n                    background: 'none', \n                    border: 'none', \n                    color: 'white', \n                    fontSize: '18px', \n                    cursor: 'pointer' \n                  }}\n                >\n                  <i className=\"fas fa-times\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          <div \n            className=\"chat-messages\"\n            style={{\n              flex: 1,\n              padding: '16px',\n              overflowY: 'auto',\n              maxHeight: '350px'\n            }}\n          >\n            {messages.length === 0 ? (\n              <div style={{ textAlign: 'center', color: '#666', padding: '20px' }}>\n                <i className=\"fas fa-comments fa-2x mb-2\"></i>\n                <p>No messages yet. Start the conversation!</p>\n                {!isConnected && (\n                  <p style={{ color: '#dc3545', fontSize: '14px' }}>\n                    <i className=\"fas fa-exclamation-triangle me-1\"></i>\n                    Server connection unavailable\n                  </p>\n                )}\n              </div>\n            ) : (\n              messages.map(renderMessage)\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Chat Input */}\n          <div style={{ padding: '16px', borderTop: '1px solid #e0e0e0' }}>\n            {!user ? (\n              <div style={{ textAlign: 'center' }}>\n                <p style={{ marginBottom: '10px', color: '#666' }}>Please log in to participate</p>\n                <button \n                  className=\"btn btn-primary btn-sm\" \n                  onClick={() => window.location.href = '/login'}\n                >\n                  Log In\n                </button>\n              </div>\n            ) : (\n              <form onSubmit={handleSendMessage}>\n                <div style={{ display: 'flex', gap: '8px' }}>\n                  <input\n                    ref={chatInputRef}\n                    type=\"text\"\n                    placeholder=\"Type a message...\"\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    maxLength={500}\n                    style={{\n                      flex: 1,\n                      padding: '8px 12px',\n                      border: '1px solid #ddd',\n                      borderRadius: '20px',\n                      outline: 'none',\n                      fontSize: '14px'\n                    }}\n                  />\n                  <button \n                    type=\"submit\" \n                    disabled={!newMessage.trim()}\n                    style={{\n                      padding: '8px 12px',\n                      background: newMessage.trim() ? '#007bff' : '#ccc',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '50%',\n                      cursor: newMessage.trim() ? 'pointer' : 'not-allowed',\n                      width: '40px',\n                      height: '40px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center'\n                    }}\n                  >\n                    <i className=\"fas fa-paper-plane\"></i>\n                  </button>\n                </div>\n                <div style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>\n                  {newMessage.length}/500 characters\n                  {!isConnected && (\n                    <span style={{ color: '#dc3545', marginLeft: '10px' }}>\n                      • Messages saved locally only\n                    </span>\n                  )}\n                </div>\n              </form>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SafeFloatingChat;"