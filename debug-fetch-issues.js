const axios = require('axios');\n\nconst API_BASE = 'http://localhost:1412/API';\n\n// Debug fetch issues and data structure\nasync function debugFetchIssues() {\n    console.log('üîç Debugging Fetch Issues and Data Structure...');\n    console.log('=' .repeat(60));\n    \n    try {\n        // Test server health\n        console.log('\\n1. üè• Testing Server Health...');\n        try {\n            const healthResponse = await axios.get(`${API_BASE}/health`);\n            console.log('‚úÖ Server is running');\n            console.log('   Status:', healthResponse.status);\n            console.log('   Response:', healthResponse.data);\n        } catch (error) {\n            console.log('‚ùå Server health check failed:', error.message);\n            console.log('üí° Make sure the server is running: cd Server && node server.js');\n            return;\n        }\n        \n        // Test Books API\n        console.log('\\n2. üìö Testing Books API...');\n        try {\n            const booksResponse = await axios.get(`${API_BASE}/books`);\n            console.log('‚úÖ Books API Response:');\n            console.log('   Status:', booksResponse.status);\n            console.log('   Response structure:');\n            console.log('   - Type of response.data:', typeof booksResponse.data);\n            console.log('   - Has \"data\" property:', 'data' in booksResponse.data);\n            console.log('   - Type of response.data.data:', typeof booksResponse.data.data);\n            console.log('   - Is response.data.data an array:', Array.isArray(booksResponse.data.data));\n            \n            if (Array.isArray(booksResponse.data.data)) {\n                console.log('   - Array length:', booksResponse.data.data.length);\n                if (booksResponse.data.data.length > 0) {\n                    console.log('   - First item keys:', Object.keys(booksResponse.data.data[0]));\n                    console.log('   - Sample book:', JSON.stringify(booksResponse.data.data[0], null, 2).substring(0, 300) + '...');\n                } else {\n                    console.log('   - Array is empty (no books in database)');\n                }\n            } else {\n                console.log('   ‚ùå response.data.data is not an array!');\n                console.log('   - Actual value:', booksResponse.data.data);\n            }\n        } catch (error) {\n            console.log('‚ùå Books API Error:');\n            console.log('   Status:', error.response?.status);\n            console.log('   Message:', error.message);\n            console.log('   Response:', error.response?.data);\n        }\n        \n        // Test Games API\n        console.log('\\n3. üéÆ Testing Games API...');\n        try {\n            const gamesResponse = await axios.get(`${API_BASE}/games`);\n            console.log('‚úÖ Games API Response:');\n            console.log('   Status:', gamesResponse.status);\n            console.log('   Response structure:');\n            console.log('   - Type of response.data:', typeof gamesResponse.data);\n            console.log('   - Has \"data\" property:', 'data' in gamesResponse.data);\n            console.log('   - Type of response.data.data:', typeof gamesResponse.data.data);\n            console.log('   - Is response.data.data an array:', Array.isArray(gamesResponse.data.data));\n            \n            if (Array.isArray(gamesResponse.data.data)) {\n                console.log('   - Array length:', gamesResponse.data.data.length);\n                if (gamesResponse.data.data.length > 0) {\n                    console.log('   - First item keys:', Object.keys(gamesResponse.data.data[0]));\n                    console.log('   - Sample game:', JSON.stringify(gamesResponse.data.data[0], null, 2).substring(0, 300) + '...');\n                } else {\n                    console.log('   - Array is empty (no games in database)');\n                }\n            } else {\n                console.log('   ‚ùå response.data.data is not an array!');\n                console.log('   - Actual value:', gamesResponse.data.data);\n            }\n        } catch (error) {\n            console.log('‚ùå Games API Error:');\n            console.log('   Status:', error.response?.status);\n            console.log('   Message:', error.message);\n            console.log('   Response:', error.response?.data);\n        }\n        \n        // Test Database Connection\n        console.log('\\n4. üóÑÔ∏è  Testing Database Connection...');\n        try {\n            // Try to get a specific endpoint that might give us more info\n            const healthResponse = await axios.get('http://localhost:1412/health');\n            console.log('‚úÖ Database status:', healthResponse.data.database);\n        } catch (error) {\n            console.log('‚ùå Could not check database status');\n        }\n        \n        // Test CORS and Headers\n        console.log('\\n5. üåê Testing CORS and Headers...');\n        try {\n            const response = await axios.get(`${API_BASE}/books`, {\n                headers: {\n                    'Origin': 'http://localhost:3000',\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('‚úÖ CORS headers working');\n            console.log('   Access-Control-Allow-Origin:', response.headers['access-control-allow-origin']);\n        } catch (error) {\n            console.log('‚ùå CORS issue detected:', error.message);\n        }\n        \n        console.log('\\n' + '=' .repeat(60));\n        console.log('üéØ SUMMARY:');\n        console.log('\\n‚úÖ Frontend fixes applied:');\n        console.log('   - Added Array.isArray() checks in Books.js');\n        console.log('   - Added Array.isArray() checks in Games.js');\n        console.log('   - Added Array.isArray() checks in Home.js');\n        console.log('   - Added Array.isArray() checks in AdminPanel.js');\n        console.log('   - Added error handling with empty array fallbacks');\n        \n        console.log('\\nüîß If you still see errors:');\n        console.log('   1. Clear browser cache and reload');\n        console.log('   2. Check browser console for specific error messages');\n        console.log('   3. Ensure MongoDB is running and connected');\n        console.log('   4. Restart both frontend and backend servers');\n        \n        console.log('\\nüöÄ To test the fixes:');\n        console.log('   1. Start backend: cd Server && node server.js');\n        console.log('   2. Start frontend: cd frontend && npm start');\n        console.log('   3. Navigate to /books and /games pages');\n        console.log('   4. Check that no \"filter is not a function\" errors appear');\n        \n    } catch (error) {\n        console.error('‚ùå Debug script failed:', error.message);\n    }\n}\n\ndebugFetchIssues();