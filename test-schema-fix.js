const axios = require('axios');\n\nconst API_BASE = 'http://localhost:1412/API';\n\nasync function testSchemaFix() {\n    console.log('üîß Testing Schema Fix for Edit Requests...');\n    console.log('=' .repeat(60));\n    \n    try {\n        // Test 1: Server Health\n        console.log('\\n1. üè• Testing Server Health...');\n        try {\n            const healthResponse = await axios.get('http://localhost:1412/health');\n            console.log('‚úÖ Server is running');\n            console.log('   Database:', healthResponse.data.database);\n        } catch (error) {\n            console.log('‚ùå Server not running. Please start with: cd Server && node server.js');\n            return;\n        }\n        \n        // Test 2: Test Edit Requests Endpoints\n        console.log('\\n2. üß™ Testing Edit Requests Endpoints...');\n        \n        const endpoints = [\n            {\n                name: 'Get My Published Content',\n                method: 'GET',\n                url: '/my-published-content',\n                description: 'Should work - fetches books and games directly'\n            },\n            {\n                name: 'Get My Edit Requests',\n                method: 'GET', \n                url: '/my-edit-requests',\n                description: 'Should work now - fixed populate issue'\n            },\n            {\n                name: 'Get Pending Edit Requests (Admin)',\n                method: 'GET',\n                url: '/edit-requests/pending', \n                description: 'Should work for admin - fixed populate issue'\n            }\n        ];\n        \n        for (const endpoint of endpoints) {\n            try {\n                console.log(`\\n   Testing: ${endpoint.name}`);\n                const response = await axios.get(`${API_BASE}${endpoint.url}`);\n                console.log(`   ‚úÖ ${endpoint.name}: Working (Status: ${response.status})`);\n                \n                if (response.data && response.data.data) {\n                    console.log(`   üìä Returned ${response.data.data.length} items`);\n                }\n            } catch (error) {\n                if (error.response?.status === 401 || error.response?.status === 403) {\n                    console.log(`   ‚ö†Ô∏è  ${endpoint.name}: Requires authentication (expected)`);\n                } else if (error.response?.status === 500) {\n                    console.log(`   ‚ùå ${endpoint.name}: Server error - ${error.response?.data?.error}`);\n                    if (error.response?.data?.error?.includes('Schema')) {\n                        console.log('   üîç This is the schema error we\\'re trying to fix!');\n                    }\n                } else {\n                    console.log(`   ‚ö†Ô∏è  ${endpoint.name}: ${error.response?.status} - ${error.response?.data?.error}`);\n                }\n            }\n        }\n        \n        console.log('\\n' + '=' .repeat(60));\n        console.log('üéØ SCHEMA FIX SUMMARY');\n        \n        console.log('\\n‚úÖ FIXES APPLIED:');\n        console.log('\\n1. üîß EditRequest Model:');\n        console.log('   - Removed problematic refPath: \\'contentType\\'');\n        console.log('   - Using manual population instead');\n        \n        console.log('\\n2. üîß EditRequestController:');\n        console.log('   - Updated all methods to manually populate contentId');\n        console.log('   - Added proper error handling for population');\n        console.log('   - Enhanced logging for debugging');\n        \n        console.log('\\n3. üîß Model Declarations:');\n        console.log('   - Fixed books.js: const mongoose = require(\\'mongoose\\');');\n        console.log('   - Fixed games.js: const mongoose = require(\\'mongoose\\');');\n        \n        console.log('\\nüìã WHAT WAS THE PROBLEM:');\n        console.log('\\n   The EditRequest model was using:');\n        console.log('   contentId: { refPath: \\'contentType\\' }');\n        console.log('   ');\n        console.log('   This expected contentType values to match model names:');\n        console.log('   - contentType: \\'book\\' should reference \\'Book\\' model');\n        console.log('   - contentType: \\'game\\' should reference \\'Game\\' model');\n        console.log('   ');\n        console.log('   But Mongoose was looking for models named \\'book\\' and \\'game\\'');\n        console.log('   instead of \\'Book\\' and \\'Game\\', causing the MissingSchemaError.');\n        \n        console.log('\\nüîß HOW WE FIXED IT:');\n        console.log('\\n   1. Removed the refPath from the schema');\n        console.log('   2. Added manual population in all controller methods:');\n        console.log('   ');\n        console.log('   if (request.contentType === \\'book\\') {');\n        console.log('       await request.populate({');\n        console.log('           path: \\'contentId\\',');\n        console.log('           model: \\'Book\\'');\n        console.log('       });');\n        console.log('   } else {');\n        console.log('       await request.populate({');\n        console.log('           path: \\'contentId\\',');\n        console.log('           model: \\'Game\\'');\n        console.log('       });');\n        console.log('   }');\n        \n        console.log('\\nüöÄ TO TEST THE FIX:');\n        console.log('\\n   1. Restart your server: cd Server && node server.js');\n        console.log('   2. Login to your application');\n        console.log('   3. Go to \"My Content\" page');\n        console.log('   4. The edit requests should now load without schema errors');\n        console.log('   5. Try creating an edit request - it should work');\n        console.log('   6. Check Admin Panel ‚Üí Notifications for edit requests');\n        \n        console.log('\\n‚ú® The MissingSchemaError should now be resolved!');\n        \n    } catch (error) {\n        console.error('‚ùå Test script failed:', error.message);\n    }\n}\n\ntestSchemaFix();"
  }
]